// Generated file. Do not edit.

def localProperties = new Properties()
def localPropertiesFile = new File(buildscript.sourceFile.parentFile.parentFile, 'local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.library'
apply from: "../../flutter.gradle"

group 'com.bingo.flutter_module'
version '1.0'

android {
    // Conditional for compatibility with AGP <4.2.
    if (project.android.hasProperty("namespace")) {
        namespace 'com.bingo.flutter_module'
    }

    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            multiDexKeepFile file('multidex-config.txt')
            multiDexKeepProguard file('multidex-config.pro')
            shrinkResources false
            minifyEnabled false
            testCoverageEnabled project.property('debuggable').toBoolean()
            debuggable project.property('debuggable').toBoolean()
            jniDebuggable project.property('debuggable').toBoolean()
            signingConfig signingConfigs.release
            buildConfigField "String", "miui_push_app_id", '"' + configProperties.getProperty('miui_push_app_id').trim() + '"'
            buildConfigField "String", "miui_push_app_key", '"' + configProperties.getProperty('miui_push_app_key').trim() + '"'
            buildConfigField "String", "flyme_push_app_id", '"' + configProperties.getProperty('flyme_push_app_id').trim() + '"'
            buildConfigField "String", "flyme_push_app_key", '"' + configProperties.getProperty('flyme_push_app_key').trim() + '"'
            buildConfigField "String", "oppo_push_app_key", '"' + configProperties.getProperty('oppo_push_app_key').trim() + '"'
            buildConfigField "String", "oppo_push_app_secret", '"' + configProperties.getProperty('oppo_push_app_secret').trim() + '"'
            buildConfigField "String", "wx_key", '"' + configProperties.getProperty('wx_key').trim() + '"'
            buildConfigField "boolean", "isOnlineBuild", project.property('online.build').toBoolean().toString()
            buildConfigField "String", "start_scheme", '"' + configProperties.getProperty('start_scheme').trim() + '"'
            buildConfigField "String", "render_mode", '"' + configProperties.getProperty('render_mode').trim() + '"'
            buildConfigField "String", "bugly_appid", '"' + configProperties.getProperty('bugly_appid')+ '"'
            manifestPlaceholders = [
                    appCode          : "${_applicationId}",
                    baidu_key        : configProperties.getProperty('baidu_key'),
                    amap_key         : configProperties.getProperty('amap_key'),
                    screenOrientation: "unspecified",
                    start_scheme     : configProperties.getProperty('start_scheme'),
            ]
        }
        debug.initWith(buildTypes.release)
        profile.initWith(buildTypes.release)
    }
}

flutter {
    source '../..'
}